name: "Generate Splunk Appinspect Results Table"
description: "Generates a Markdown table from a Splunk Appinspect CLI JSON file and writes it to GitHub output."
author: "LiveHybrid"
inputs:
  json_file:
    description: "The path to the JSON file containing the results."
    required: true
  tag:
    description: "The tag (used in result file naming)."
    required: true
  github_token:
    description: "GitHub Token for authentication."
    required: true
  include_not_applicable:
    description: "Include 'not_applicable' category in the output (true/false)."
    required: false
    default: "true"
runs:
  using: "composite"
  steps:
    - name: Generate Markdown Table
      shell: bash
      run: |
        echo "Starting JSON parsing..."
        python3 - <<EOF
        import json

        # Load the JSON file
        json_file = "${{ inputs.json_file }}"
        include_not_applicable = "${{ inputs.include_not_applicable }}" == "true"

        with open(json_file, "r") as file:
            data = json.load(file)

            report = data.get("reports", [])[0] if isinstance(data.get("reports", []), list) and len(data.get("reports", [])) > 0 else {}

            # Define result categories, colors, and icons
            categories = {
                "failure": ":red_circle:",
                "success": ":green_circle:",
                "manual_check": ":large_blue_circle:",
                "not_applicable": ":white_circle:",
                "warning": ":yellow_circle:",
            }

            # Add "warning" to the priority list
            priority_order = ["failure", "warning", "success", "manual_check"]
            if include_not_applicable:
              priority_order.append("not_applicable")
              
            # Sort checks by priority
            checks = []
            for group in report.get("groups", []):
                if isinstance(group, dict):  # Ensure group is a dictionary
                    for check in group.get("checks", []):
                        messages = [message.get("message", "") for message in check.get("messages", [])]
                        result = check.get("result", "not_applicable")
                        if result in priority_order:
                            checks.append(
                                {
                                    "name": check.get("name", "N/A"),
                                    "result": result,
                                    "messages": "<br>".join(messages),
                                }
                            )

            sorted_checks = sorted(checks, key=lambda x: priority_order.index(x["result"]) if x["result"] in priority_order else len(priority_order))

            # Generate Markdown table with messages as a new column
            markdown_table = "| Check Name | Result | Messages |\n|------------|--------|----------|\n"
            for check in sorted_checks:
                result = check["result"]
                icon = categories.get(result, ":question:")
                messages = check["messages"] if check["messages"] else "N/A"
                markdown_table += f"| {check['name']} | {icon} {result} | {messages} |\n"

            # Save the Markdown table to a file
            with open("markdown_output.txt", "w") as file:
                file.write(markdown_table)
        EOF

    - name: Write Markdown to GITHUB_OUTPUT
      shell: bash
      id: set-markdown
      run: |
        markdown_table=$(<markdown_output.txt)
        escaped_markdown=$(echo "$markdown_table" | sed -E ':a;N;$!ba;s/\\/\\\\/g;s/"/\\"/g;s/\n/\\n/g')
        echo "markdown_table=$escaped_markdown" >> $GITHUB_OUTPUT
        
    - uses: LouisBrunner/checks-action@v2.0.0
      with:
        token: ${{ inputs.github_token }}
        name: Test Results - CLI (${{ inputs.tag }})
        conclusion: success
        output: |
          {"summary":"${{ steps.set-markdown.outputs.markdown_table }}`"}
          
    # - name: upload-appinspect-report
    #   if: ${{ !cancelled() }}
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: appinspect_${{ inputs.tag }}_checks.json
    #     path: appinspect_result_${{ inputs.tag }}.json
    # - name: upload-markdown
    #   if: inputs.tag == 'manual'
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: check_markdown
    #     path: |
    #       *_markdown.txt
